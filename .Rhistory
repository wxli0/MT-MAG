install.packages("rmarkdown")
install.packages("DECIPHER")
install.packages("DECIPHER")
install.packages("DECIPHER")
install.packages("DECIPHER")
install.packages("DECIPHER")
install.packages("DECIPHER")
install.packages("DECIPHER")
install.packages("DECIPHER")
install.packages("DECIPHER")
install.packages("sp")
install.packages("DECIPHER")
install.packages("DECIPHER")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DECIPHER")
BiocManager::install("DECIPHER")
# load the DECIPHER library in R
library(DECIPHER)
install.packages("DECIPHER", repos=c('http://bioconductor.org/packages/3.9/bioc',
'http://cran.wustl.edu/',
'http://bioconductor.org/packages/release/data/annotation'))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
BiocManager::install(version = "3.12")
BiocManager::install()
BiocManager::install(version = "3.12")
BiocManager::install()
biocLite
BiocManager::install("DECIPHER")
BiocManager::install("DECIPHER")
BiocManager::install("DECIPHER")
BiocManager::install("DECIPHER")
BiocManager::install("DECIPHER")
BiocManager::install("DECIPHER")
BiocManager::install("DECIPHER")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DECIPHER")
BiocManager::install("DECIPHER")
options(timeout = 300)
BiocManager::install("DECIPHER")
BiocManager::install("DECIPHER")
quit()
search()
package.dependencies("DECIPHER", check=True)
library(tools)
package.dependencies("DECIPHER", check=True)
package_dependencies("DECIPHER", check=True)
package_dependencies("DECIPHER")
install.packages("https://bioconductor.org/packages/3.12/bioc/bin/macosx/contrib/4.0/DECIPHER_2.18.1.tgz", repo=NULL, type="source")
options(timeout = 300)
install.packages("https://bioconductor.org/packages/3.12/bioc/bin/macosx/contrib/4.0/DECIPHER_2.18.1.tgz", repo=NULL, type="source")
quit()
library(reliabilitydiag)
library(reliabilitydiag)
#> 'brier' score decomposition (see also
?summary.reliabilitydiag
x<-[1,1,1]
x<-c(1,1,1)
y<-c(1,1,1)
reliabilitydiag(EMOS = X, y = Y)
reliabilitydiag(EMOS = x, y = y)
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP-desktop/samples/Table_S1_new.csv", sep = ";", header = TRUE)
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP-desktop/samples/Table_S1_new.csv", sep = ";", header = TRUE)
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP-desktop/samples/Table_S1_new.csv", sep = ",", header = TRUE)
tab1
library(ggplot2)
#GC content histogram
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
#contig count, outliers above 1000 removed
qplot(tab1[which(tab1$contig_count<1000),2], geom = "histogram", ylab = "Number of genomes (all)", xlab = "Contig count (max 1000 displayed)")
#genome size
qplot(tab1[which(tab1$genome_size<12500000),5], geom = "histogram", ylab = "Number of genomes (all)", xlab = "Genome size in basepairs (max 1.25 Gbp displayed)")
#contig count, outliers above 1000 removed
qplot(tab1[which(tab1$contig_count<1000),2], geom = "histogram", ylab = "Number of genomes (all)", xlab = "Contig count (max 1000 displayed)")
tab1
tab1$contig_count
qplot(tab1[which(tab1$contig_count<1000),2], geom = "histogram", ylab = "Number of genomes (all)", xlab = "Contig count (max 1000 displayed)")
#contig count, outliers above 1000 removed
qplot(tab1$contig_count, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Contig count")
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP-desktop/samples/Table_S1_new.csv", sep = ",", header = TRUE)
library(ggplot2)
#ALL DATA
#GC content histogram
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
#contig count, outliers above 1000 removed
qplot(tab1$contig_count, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Contig count")
#genome size
qplot(tab1$genome_size, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Genome size in basepairs")
#REPRESENTATIVES
tab2 = tab1[which(tab1$gtdb_representative=="t"),]
#GC content histogram
qplot(tab2$gc_percentage, geom="histogram", ylab = "Number of genomes (species-level representatives)", xlab = "Percent GC")
#contig count, outliers above 1000 removed
qplot(tab2[which(tab2$contig_count<1000),2], geom = "histogram", , ylab = "Number of genomes (species-level representatives)", xlab = "Contig count (max 1000 displayed)")
#genome size
qplot(tab2[which(tab2$genome_size<12500000),5], geom = "histogram", ylab = "Number of genomes (species-level representatives)", xlab = "Genome size in basepairs (max 1.25 Gbp displayed)")
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP-desktop/samples/Table_S1_new.csv", sep = ",", header = TRUE)
library(ggplot2)
#ALL DATA
#GC content histogram
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
#contig count, outliers above 1000 removed
qplot(tab1$contig_count, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Contig count")
#genome size
qplot(tab1$genome_size, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Genome size in basepairs")
#
# #REPRESENTATIVES
#
# tab2 = tab1[which(tab1$gtdb_representative=="t"),]
#
# #GC content histogram
# qplot(tab2$gc_percentage, geom="histogram", ylab = "Number of genomes (species-level representatives)", xlab = "Percent GC")
#
# #contig count, outliers above 1000 removed
# qplot(tab2[which(tab2$contig_count<1000),2], geom = "histogram", , ylab = "Number of genomes (species-level representatives)", xlab = "Contig count (max 1000 displayed)")
#
# #genome size
# qplot(tab2[which(tab2$genome_size<12500000),5], geom = "histogram", ylab = "Number of genomes (species-level representatives)", xlab = "Genome size in basepairs (max 1.25 Gbp displayed)")
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP-desktop/samples/Table_S1_new.csv", sep = ",", header = TRUE)
library(ggplot2)
pdf("/Users/wanxinli/Desktop/project.nosync/MLDSP-desktop/outputs-HGR-r202/HGR_bar_charts.pdf")
#ALL DATA
#GC content histogram
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
#contig count, outliers above 1000 removed
qplot(tab1$contig_count, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Contig count")
#genome size
qplot(tab1$genome_size, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Genome size in basepairs")
#
dev.off()
# #REPRESENTATIVES
#
# tab2 = tab1[which(tab1$gtdb_representative=="t"),]
#
# #GC content histogram
# qplot(tab2$gc_percentage, geom="histogram", ylab = "Number of genomes (species-level representatives)", xlab = "Percent GC")
#
# #contig count, outliers above 1000 removed
# qplot(tab2[which(tab2$contig_count<1000),2], geom = "histogram", , ylab = "Number of genomes (species-level representatives)", xlab = "Contig count (max 1000 displayed)")
#
# #genome size
# qplot(tab2[which(tab2$genome_size<12500000),5], geom = "histogram", ylab = "Number of genomes (species-level representatives)", xlab = "Genome size in basepairs (max 1.25 Gbp displayed)")
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP-desktop/samples/Table_S1_new.csv", sep = ",", header = TRUE)
tab1[which$Species='s__']
tab1[which(tab1$Species='s__'),]
tab1[which(tab1$Species=='s__'),]
tab1[which(tab1$Species!='s__'),]
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP-desktop/samples/Table_S1_new.csv", sep = ",", header = TRUE)
tab1 = tab1[which(tab1$Species!='s__'),]
library(ggplot2)
pdf("/Users/wanxinli/Desktop/project.nosync/MLDSP-desktop/outputs-HGR-r202/HGR_bar_charts.pdf")
#ALL DATA
#GC content histogram
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
#contig count, outliers above 1000 removed
qplot(tab1$contig_count, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Contig count")
#genome size
qplot(tab1$genome_size, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Genome size in basepairs")
#
# dev.off()
# #REPRESENTATIVES
#
# tab2 = tab1[which(tab1$gtdb_representative=="t"),]
#
# #GC content histogram
# qplot(tab2$gc_percentage, geom="histogram", ylab = "Number of genomes (species-level representatives)", xlab = "Percent GC")
#
# #contig count, outliers above 1000 removed
# qplot(tab2[which(tab2$contig_count<1000),2], geom = "histogram", , ylab = "Number of genomes (species-level representatives)", xlab = "Contig count (max 1000 displayed)")
#
# #genome size
# qplot(tab2[which(tab2$genome_size<12500000),5], geom = "histogram", ylab = "Number of genomes (species-level representatives)", xlab = "Genome size in basepairs (max 1.25 Gbp displayed)")
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP-desktop/samples/Table_S1_new.csv", sep = ",", header = TRUE)
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
source('~/Library/Containers/com.apple.mail/Data/Library/Mail Downloads/B1F16596-7142-436F-8E90-3FEBC3DF0B40/GTDB_histograms.R', echo=TRUE)
tab1
length(tab1)
tab1.shape
dim(tab1)
dev.off()
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP-desktop/samples/Table_S1_new.csv", sep = ",", header = TRUE)
tab1 = tab1[which(tab1$Species!='s__'),]
library(ggplot2)
pdf("/Users/wanxinli/Desktop/project.nosync/MLDSP-desktop/outputs-HGR-r202/HGR_bar_charts.pdf")
#ALL DATA
#GC content histogram
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
#contig count, outliers above 1000 removed
qplot(tab1$contig_count, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Contig count")
#genome size
qplot(tab1$genome_size, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Genome size in basepairs")
#
dev.off()
# #REPRESENTATIVES
#
# tab2 = tab1[which(tab1$gtdb_representative=="t"),]
#
# #GC content histogram
# qplot(tab2$gc_percentage, geom="histogram", ylab = "Number of genomes (species-level representatives)", xlab = "Percent GC")
#
# #contig count, outliers above 1000 removed
# qplot(tab2[which(tab2$contig_count<1000),2], geom = "histogram", , ylab = "Number of genomes (species-level representatives)", xlab = "Contig count (max 1000 displayed)")
#
# #genome size
# qplot(tab2[which(tab2$genome_size<12500000),5], geom = "histogram", ylab = "Number of genomes (species-level representatives)", xlab = "Genome size in basepairs (max 1.25 Gbp displayed)")
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
qplot(tab1$contig_count, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Contig count")
qplot(tab1$genome_size, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Genome size in basepairs")
tab1 = read.table(xfile = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/ERP108418_metadata.csv", sep = ",", header = TRUE)
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/ERP108418_metadata.csv", sep = ",", header = TRUE)
library(ggplot2)
#GC content histogram
png("paper/ERP108418_GC.png", width = 402, height = 496)
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
dev.off()
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
qplot(tab1$genome_size, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Genome size in basepairs")
tab1$genome_size
qplot(tab1$contig_count, geom = "histogram", ylab = "Number of genomes (all)", xlab = "Contig count")
tab1$contig_count
tab1 = read.table(file = "samples/rumen_mag_metadata.csv", sep = "\t", header = TRUE)
# tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/ERP108418_metadata.csv", sep = ",", header = TRUE)
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/rumen_mag_metadata.csv", sep = "\t", header = TRUE)
paste0("this,", 'that')
# tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/ERP108418_metadata.csv", sep = ",", header = TRUE)
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/rumen_mag_metadata.csv", sep = "\t", header = TRUE)
help(qplot)
# tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/ERP108418_metadata.csv", sep = ",", header = TRUE)
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/rumen_mag_metadata.csv", sep = "\t", header = TRUE)
id = "rumen"
library(ggplot2)
#GC content histogram
scale_x_continuous(limits = c(-5000, 5000))
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
#GC content histogram
scale_x_continuous(limits = c(0, 100))
png(paste0("paper/", id, "_GC.png"), width = 402, height = 496)
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
# tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/ERP108418_metadata.csv", sep = ",", header = TRUE)
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/rumen_mag_metadata.csv", sep = "\t", header = TRUE)
id = "rumen"
library(ggplot2)
#GC content histogram
scale_x_continuous(limits = c(0, 100))
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
setwd("Desktop/project.nosync/MT-MAG/")
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
tab1$gc_percentage
# tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/ERP108418_metadata.csv", sep = ",", header = TRUE)
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/rumen_mag_metadata.csv", sep = "\t", header = TRUE)
TAV1
tab1
# tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/ERP108418_metadata.csv", sep = ",", header = TRUE)
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/rumen_mag_metadata.csv", sep = ",", header = TRUE)
tab1
tab1$gc_percentage
#GC content histogram
scale_x_continuous(limits = c(0, 100))
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
png(paste0("paper/", id, "_GC.png"), width = 402, height = 496)
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
dev.off()
#GC content histogram
scale_x_continuous(limits = c(0, 100))
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
#GC content histogram
scale_x_continuous(limits = c(0, 50))
png(paste0("paper/", id, "_GC.png"), width = 402, height = 496)
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
# tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/ERP108418_metadata.csv", sep = ",", header = TRUE)
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/rumen_mag_metadata.csv", sep = ",", header = TRUE)
library(ggplot2)
#GC content histogram
coord_cartesian(xlim = c(0,100), expand=0)
png(paste0("paper/", id, "_GC.png"), width = 402, height = 496)
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
tab1$gc_percentage
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
dev.off()
#GC content histogram
coord_cartesian(xlim = c(0,1), expand=0)
png(paste0("paper/", id, "_GC.png"), width = 402, height = 496)
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
scale_y_continuous(labels = scales::percent,
expand = expand_scale(),
limits = c(0,1))
png(paste0("paper/", id, "_GC.png"), width = 402, height = 496)
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/rumen_mag_metadata.csv", sep = ",", header = TRUE)
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/rumen_mag_metadata.csv", sep = ",", header = TRUE)
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/rumen_mag_metadata.csv", sep = ",", header = TRUE)
tab1 = read.table(file = "/Users/wanxinli/Desktop/project.nosync/MLDSP/samples/rumen_mag_metadata.csv", sep = ",", header = TRUE)
id = "rumen"
library(ggplot2)
#GC content histogram
scale_y_continuous(labels = scales::percent,
expand = expand_scale(),
limits = c(0,1))
png(paste0("paper/", id, "_GC.png"), width = 402, height = 496)
qplot(tab1$gc_percentage, geom="histogram", ylab = "Number of genomes (all)", xlab = "Percent GC")
